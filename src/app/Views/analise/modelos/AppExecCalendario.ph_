<?php
$parametros_backend = array(
    'DEBUG_MY_PRINT' => false,
    'request_scheme' => $_SERVER['REQUEST_SCHEME'],
    'server_name' => $_SERVER['SERVER_NAME'],
    'server_port' => $_SERVER['SERVER_PORT'],
    'getURI' => isset($metadata['getURI']) ? ($metadata['getURI']) : (array()),
    'base_url' => base_url(),
    'base_api_calendario' => 'analise/modelo/api/diasmes',
);
?>

<div class="app_exec_calendario" data-result='<?php echo json_encode($parametros_backend); ?>'></div>

<script type="text/babel">
    const AppExecCalendario = ({ setParametros = {} }) => {
        // Definindo valores a partir de setParametros ou valores default

        // Variáveis recebidas do Backend
        const parametros = JSON.parse(document.querySelector('.app_exec_calendario').getAttribute('data-result'));

        // Prepara as Variáveis do REACT recebidas pelo BACKEND
        const getURI = parametros.getURI;
        const debugMyPrint = parametros.DEBUG_MY_PRINT;
        const request_scheme = parametros.request_scheme;
        const server_name = parametros.server_name;
        const server_port = parametros.server_port;
        const base_url = parametros.base_url;
        const base_api_calendario = parametros.base_api_calendario;

        const [anoMes, setAnoMes] = React.useState({
            ano: new Date().getFullYear(),
            mes: String(new Date().getMonth() + 1).padStart(2, '0')
        });

        const [diasCalendario, setDiasCalendario] = React.useState([]);

        // Função que faz o fetch da API com base no ano e mês
        const fetchCalendario = async () => {
            console.log('Passon... fetchCalendario... ');
            try {
                const response = await fetch(`${base_url}${base_api_calendario}/${anoMes.ano}/${anoMes.mes}`);
                const data = await response.json();
                if (data.status === 'success') {
                    console.log('data.result: ', data.result)
                    setDiasCalendario(data.result);
                }
            } catch (error) {
                console.error("Erro ao carregar o calendário:", error);
            }
        };

        React.useEffect(() => {
            console.log('Passon... React.useEffect ... ');
            fetchCalendario();
        }, [anoMes]);

        // Função que renderiza o calendário começando por domingo
        const renderCalendario = () => {
            console.log('Passon... renderCalendario ... ');
            const diasSemana = ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"];
            let calendario = [];

            diasCalendario.forEach((callendario_map, index) => {
                calendario.push(
                    <div key={index} className="col text-center">
                        <strong>{callendario_map.semana}</strong><br />
                        {callendario_map.dia}/{callendario_map.text_mes}
                    </div>
                );
            });

            return calendario;
        };

        return (
            <div className="container">
                <div className="row">
                    {renderCalendario()}
                </div>
            </div>
        );
    };

    const rootElement = document.querySelector('.app_exec_calendario');
    const root = ReactDOM.createRoot(rootElement);
    root.render(<AppExecCalendario />);
</script>